@use '../variables/colors.scss' as colors;

$grid-gutter-widths: (
    default: 0,
    xs: 0.5rem,
    sm: 1rem,
    md: 1.5rem,
    lg: 2rem,
    xl: 2.5rem,
    xxl: 3rem,
);

@function gutter($breakpoint) {
    @return map-get($grid-gutter-widths, $breakpoint);
}

$grid-gutter-container: (
    default: 0,
);

@function containerGutter($breakpoint) {
    @return map-get($grid-gutter-container, $breakpoint);
}

@mixin flex-container (
    $direction: column,
    $wrap: wrap,
    $justify:flex-start,
    $align:flex-start,

    ) {
    align-items: $align;
    display: flex;
    flex-direction: $direction;
    flex-wrap: $wrap;
    justify-content: $justify;
}

$margin-sizes: (
    default: 0,
    xs: 0.5rem,
    top: 1rem,
    auto: auto,
    md: 2rem,
    lg: 2.13rem
);

@mixin margin($size: sm, $sides: all) {  // Add $sides parameter with default 'all'
    @if $sides == all {
      margin: map-get($margin-sizes, $size);
    } @else if $sides == 'x' {
      margin-left: map-get($margin-sizes, $size);
      margin-right: map-get($margin-sizes, $size);
    } @else if $sides == 'y' {
      margin-top: map-get($margin-sizes, $size);
      margin-bottom: map-get($margin-sizes, $size);
    } @else {
      @each $side in $sides {
        @if $side == top {
          margin-top: map-get($margin-sizes, $size);
        } @else if $side == right {
          margin-right: map-get($margin-sizes, $size);
        } @else if $side == bottom {
          margin-bottom: map-get($margin-sizes, $size);
        } @else if $side == left {
          margin-left: map-get($margin-sizes, $size);
        } @else {
          @warn "Invalid margin side: #{$side}";
        }
      }
    }
  }

$gap-sizes: (
    sm: 1rem,
    md: 2rem,
    lg: 3rem,
);

@mixin gap($size: sm) {
    gap: map-get($gap-sizes, $size);
}

@mixin text-align($alignment: left) {
    text-align: $alignment;
}



@mixin link-hover-style( $underline-offset: 0.15em, 
    $underline-color: colors.colorTheme(red),
    $link-color: colors.colorTheme(black),
    $hover-bg-color: colors.colorTheme(black),
    $hover-color: colors.colorTheme(yellow),
    $border-radius: 5px,
) {
    text-transform: uppercase;
    text-align: start;
    width: 100%;
    color: $link-color;
    background-color: transparent;
    border-radius: $border-radius;
    transition: all 0.3s ease;
    border-bottom: 2px solid transparent;
    padding: 12px 1rem;
    &:hover {
        color: $hover-color;
        background-color: $hover-bg-color;
        border-bottom: 2px solid $underline-color;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    &:active,
    &:focus {
        outline: none;
        background-color: $hover-bg-color;
        color: $hover-color;
    }
}

@mixin button-style(
    $underline-color: colors.colorTheme(red),
    $link-color: colors.colorTheme(black),
    $hover-bg-color: colors.colorTheme(black),
    $hover-color: colors.colorTheme(yellow),
    $border-radius: 5px,
) {
    background-color: colors.colorTheme(yellow);
    color: colors.colorTheme(red);
    text-align: center;
    border: 1px solid colors.colorTheme(black);
    min-width: 10em;
    font-weight: 700;
    letter-spacing: 0.05rem;
    &:hover {
        color: colors.colorTheme(yellow);
        background-color: colors.colorTheme(red);
        border-bottom: 2px solid $underline-color;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    &:active,
    &:focus {
        outline: none;
        background-color: $hover-bg-color;
        color: $hover-color;
    }
}

@mixin call-action {
    background-color: colors.colorTheme(yellow); 
    color: colors.colorTheme(black);
    border: none;
    font-weight: bold; 
    transition: all 0.3s ease;
    border-radius: 5px;
    font-size: 0.875rem;
    padding: 0.875rem 1rem;
    border-radius: 0;
    align-self: center;
    &:hover {
        background-color: colors.colorTheme(red); 
        color: colors.colorTheme(yellow); 
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2); 
        transform: translateY(-2px);
    }
}